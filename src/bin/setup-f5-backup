#!/usr/bin/env python
#
print("""
################################################################################
# The goal of this script is to automate the F5 backup setup process after the
# upgrade or a new installation, as the previous installed backup process may
# be wiped out during the upgrade / installation.
#
#    Refer to Evernotes "F5 Backup Notes" for furhter details
#
################################################################################
# Version: 0.1, Date: June 19 2018
# Author: Sam Li, yangsec888@gmail.com, x.x.1972
# Usage:
#         $ setup-f5-backup
###############################################################################
# Prerequisite:
# a. You have sufficient AD access (sudo) to backup file server 'wmarchive01'.
# b. You have privileged access to F5 box.
###############################################################################
""")
import os
import sys
import getpass
import re
import paramiko  # library to establish ssh connection

verbose = False
# simple program argument check
if len(sys.argv) > 1:
    print("Usage: python setup-f5-backup.py")
    sys.exit(1)

# simple legal disclaimer
disclaimer = input("""
                Legal Disclaimer
It's dangerous to execute remote commands in general, if you don't understand
what it does for you. Do you have the opportunity to read the script and fully
understand what it does, and agree not to hold the author on any liability
should any unexpected bad thing happen? (Y or N)""")
if disclaimer.upper() == "Y":
    print("\nProceeding to the program...")
else:
    print("Quiting the program. Have a great day! ")
    sys.exit(1)

# setup F5 connection string
f5_connection = {
    "host_name": input("Establish F5 box connection. Please enter the F5 hostname: "),
    "user_name": "root",
    #"user_key": "/Users/sli/.ssh/id_rsa.pub",
    "user_pass": getpass.getpass("Please enter F5 root password: ")
}

# setup backup server connection string
backup_connection = {
    "host_name": "wmarchive01.us.mask.com",
    "user_name": input("Establish connection to backup server wmarchive01. Please enter your AD user ID: "),
    #"user_key": "/Users/sli/.ssh/id_rsa.pub",
    "user_pass": getpass.getpass("Please enter your AD password: ")
}

# function remote exec ssh command
def ssh_command(ssh_connect,command_string,sudo_pass, feed_password=False):
    try:
        print("Remote execution on the remote SSH host: ",command_string)
        ssh_connect.invoke_shell()
        stdin, stdout, stderr = ssh_connect.exec_command(command_string)
        cmd_out_string=str(stdout.readlines())
        cmd_out_err=str(stderr.readlines())
        print("cmd_out_string:",cmd_out_string)
        if verbose:
            print("cmd_out_err:",cmd_out_err)
        new_host_key = re.match( r'Are you sure you want to continue connecting', cmd_out_string, re.M|re.I)
        if new_host_key:
            stdin.write("yes" + "\n")
            stdin.flush()
        if feed_password:
            stdin.write(sudo_pass + "\n")
            stdin.flush()
        print((stdout.read()))
        print("Task complete.\n\n")
        #ssh_connect.close()  # keep connection open for the next command
    except Exception as e:
        print('SSH Command Failed:')
        print(e)

# function build remote ssh connection
def ssh_connect(host_name, user_name, user_pass):
    try:
        print("Setting up remote SSH session to host:",host_name)
        client = paramiko.SSHClient()
        #out, err = client.ssh('fake_command', output=True)
        client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        client.connect(hostname=host_name, port=22, username=user_name, password=user_pass, timeout=7)
        return client
    except Exception as e:
        print('Connection Failed:')
        print(e)

################################################################################
#      Main Program
################################################################################
if __name__ == '__main__':
    ## Section I: Setup local exec directory in F5 box
    # Step 1. get a connection
    ssh_f5 = ssh_connect(f5_connection['host_name'],f5_connection['user_name'],f5_connection['user_pass'])
    # Step 2. build command string
    cmd_00 = "mkdir /var/local/bin"
    cmd_01 = "ls -l /var/local"
    # Step 3. execute the command
    for x in [cmd_00,cmd_01]:
        ssh_command(ssh_f5, x, f5_connection["user_pass"], False)


    ## Section II: Connect to backup server, then copy files over to the F5 box
    ssh_backup = ssh_connect(backup_connection['host_name'],backup_connection['user_name'],backup_connection['user_pass'])
    # setup the crontab in remote f5 in order to kick-off daily F5 backup
    cmd_10="ls -l /backups"
    if verbose:
        ssh_command(ssh_backup, cmd_10, "", False)
    sudo_pass=backup_connection['user_pass']
    cmd_11="sudo -S <<< " + sudo_pass + " sshpass -p " + "\"" + f5_connection['user_pass'] + "\"" + " scp -q -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null /backups/f5/scripts/f5/cron/*  " + f5_connection["user_name"] + "@" + f5_connection["host_name"] + ":/etc/cron.d/"
    # copy over the actual backup script
    cmd_12="sudo -S <<< " + sudo_pass + " sshpass -p " + "\"" + f5_connection['user_pass'] + "\"" + " scp -q -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null /backups/f5/scripts/f5/var_local_bin/f5backup.sh " + f5_connection["user_name"] + "@" + f5_connection["host_name"] + ":/var/local/bin/"
    # Copy over the trusted key to establish password less communication between F5 host and backup server
    cmd_13="sudo -S <<< " + sudo_pass + " sshpass -p " + "\"" + f5_connection['user_pass'] + "\"" + " scp -q -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null /backups/f5/scripts/f5/root_dot_ssh/* " + f5_connection["user_name"] + "@" + f5_connection["host_name"] + ":/root/.ssh/"
    # execute the above command strings
    for y in [cmd_11, cmd_12, cmd_13]:
        ssh_command(ssh_backup, y, "", False)


    ## Section III: Connect to F5 box; then test run the backup script from F5 box
    # Step 1. get a connection
    ssh_f5 = ssh_connect(f5_connection['host_name'],f5_connection['user_name'],f5_connection['user_pass'])
    # Step 2. build command string
    cmd_3 = "/bin/bash /var/local/bin/f5backup.sh 1>/var/tmp/f5backup.log 2>&1"
    # Step 3. execute the test backup command
    ssh_command(ssh_f5, cmd_3, "", False)
    # Step 4. inspect the backup file in F5
    cmd_4 = "ls -ltr /var/local/backups"
    ssh_command(ssh_f5, cmd_4, "", False)
    print("Please check the timestamp on the newest backup files - which should match current timestamp. Bye!")


    ## Section IV:  close open connections
    ssh_f5.close()
    ssh_backup.close()
