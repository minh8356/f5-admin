mask#!/usr/bin/env python
#
print("""
################################################################################
# The goal of this program is check cert expiration. It start by filtering out
#  vips servicing https live. Then, it would trace down and exam its cert. If
# cert is expiring within 30 days, an email alarm will be sent out.
#
################################################################################
# Version: 0.2, Date: March 05 2019
# Author: Sam Li, yangsec888@gmail.com, x.x.1972
# Usage:
#         $ cert-chk --node xxx
###############################################################################
# Prerequisite:
# a. F5 remote SSH access service are setup.
# b. You have privileged access to the F5 TMOS configuration.
###############################################################################
""")
#from client import F5Client
import f5_admin
from f5_admin.util import *
import argparse
import os
import time
from datetime import datetime
from os.path import isfile, join
# send notice over relay host
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.header import Header

# command argument switch setup
parser = argparse.ArgumentParser(description='This program will monitor F5 client ssl certification expiration date for you. ')
parser.add_argument('-n','--node', help='(Optional) Remote F5 hostname or IP address',required=False)
parser.add_argument('-a','--all',help='(Optional) Exam all known F5 nodes in the local cache directory. ', action='store_true', default=False, required=False)
parser.add_argument('-u','--user', help='(Optional) F5 box logon user ID. Default to root. ',required=False)
parser.add_argument('-p','--password', nargs='+', help='(Optional) F5 box root password',required=False)
parser.add_argument('-e','--email', help='Email notiification address when alarm trip',required=True)
parser.add_argument('-r','--refresh',help='(Optional) Refresh the F5 running configuration in the local cache directory. ', action='store_true', default=False, required=False)
parser.add_argument('-v','--verbose', help='(Optional) Verbose mode',action='store_true', default=False, required=False)
args = parser.parse_args()

# convert epoch timestamp to human readable time string
def ts_to_str(ts_epoch):
    return datetime.fromtimestamp(ts_epoch).strftime('%Y-%m-%d %H:%M:%S')


# cert check worker
def chk_worker(f5_node):
    with f5_admin.F5Client(credential, 7, args.verbose) as my_f5:
        current_time = int(time.time())
        my_f5.load(f5_node)
        vs_objs = my_f5.filter_f5_objs(my_f5.top_objs, "ltm virtual ")
        vs_ssl_objs = my_f5.filter_f5_objs(vs_objs, "context clientside")
        vs_disable_objs = my_f5.filter_f5_objs(vs_ssl_objs, "disabled")
        vs_target_objs = { k: v for k, v in list(vs_ssl_objs.items()) if k not in vs_disable_objs }
        print("Total number of target VIPs Checked: ", len(list(vs_target_objs.keys())), "\n")

        #  Digital cert tracing down and exam
        for x, y in list(vs_target_objs.items()):
            client_ssl_name  = my_f5.search_client_ssl(y) # find client-ssl profile name
            client_ssl_key = "ltm profile client-ssl " + client_ssl_name
            client_ssl_obj = ""
            for k,v in list(my_f5.top_objs.items()):
                if client_ssl_key in k:
                    client_ssl_obj =v
                    break
            if client_ssl_obj:
                vip = my_f5.search_vip(y)
                cert_name = my_f5.search_cert_in_client_ssl_profile(client_ssl_obj)
                expiration = my_f5.get_cert_expiration_by_name(cert_name)
                if int(expiration) - 2592000 < current_time: # 30 days threshold
                    if args.verbose:
                        print("client_ssl_obj: ")
                        my_f5.print_obj(client_ssl_key,client_ssl_obj)
                    notice = "F5 Node: " + my_f5.node  + " => F5 Config Object: " + x + " => VIP:" + vip + " => client_ssl profile: " + client_ssl_key + " => Cert_name: " + cert_name + " => Expiration: " + ts_to_str(int(expiration))
                    #mail_cmd = "mail -s \"Digital Cert 30 Days Expiration Notice\" itsecurity@mask.com <<< " + "\"" + notice + "\""
                    print("Notice: ", notice)
                    #print "Command: ", mail_cmd
                    #os.system(mail_cmd)
                    notice_30days_expiration(args.email, notice)
    return len(list(vs_target_objs.keys()))

# send out email notice
def notice_30days_expiration(to_email,notice):
    print("Sending notice to: ", to_email)
    # build the email content
    msg = MIMEMultipart('alternative')
    msg['Subject'] = "Client SSL Cert 30 Day Expiration Notice @wmstools01"
    msg['From'] = str(Header('Deploy Engineer <deploy@apps.mask.com>'))
    msg['To'] = to_email
    mime_part = MIMEText(notice, 'plain')
    msg.attach(mime_part)
    # send out email
    server=smtplib.SMTP("exrelay.us.mask.com:25")
    server.sendmail(msg['From'],msg['To'], msg.as_string())
    server.quit()
    print("Email sent. ")

################################################################################
#      Main Program
################################################################################
if __name__ == '__main__':

    # simple command argument check
    if not (args.node or args.all):
        print("Command for help: ",__file__, " -h")
        exit(1)
    # Setup F5 connection string
    if args.password:
        credential = set_credential_1(args.user, *args.password)
    else:
        credential = set_credential_2(args.user)

    total_chk = 0
    if args.node:
        sub_total = chk_worker(args.node)
        total_chk += sub_total
    elif args.all:
        with f5_admin.F5Client(credential, 7, args.verbose) as my_f5:
            nodes = my_f5.get_node_list()
            whitelist = ['ny-f5-rhwebdev1', 'ny-f5-rhwebdev2', 'wm-f5-bigiq1', 'wm-f5-vcmp-1', 'wm-f5-vcmp-2']
            chk_nodes = [ node for node in nodes if node not in whitelist]
        for node in chk_nodes:
            sub_total = chk_worker(node)
            total_chk += sub_total

    # Print the confirmation
    print("Total number of live VIPs with client SSL checked: ", total_chk)
    print("""
All done. Bye!""")
